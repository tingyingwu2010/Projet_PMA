function Preprocess(numitem, weight_new)
    # the weight has already been sorted and normalized
    weight = copy(weight_new)
    numitem = trunc(Int,numitem)
    # there are 3 cases can be considered
    num_bin_1 = 0
    num_bin_2 = 0
    num_bin_3 = 0

    # initialization of the pattern of each bin
    pattern_bin = Array{Array{}}(undef,numitem)
    for i in 1:numitem
        pattern_bin[i] = zeros(1,numitem)
    end
    p = 0

    # initialization of the index of items considered by the preprocessing algorithm
    index = []
    for i in 2:numitem
        # if the item is so large that it can not even pack with the lightest item
        if weight[1] + weight[i] > 1
            num_bin_1 = num_bin_1+1
            p = p + 1
            pattern_bin[p][i] = 1
            push!(index,i)
        end
    end
    println("so large: ",num_bin_1)

    # if the item can be packed directly with another item
    # because the sum of weights of these two items equals to the capacity
    for i in 1:(numitem-1)
        for j in (i+1):numitem
            # the sum of weights of items i,j equals to the capacity
            # and we have not considered these two items
            if ((weight[i]+weight[j] == 1) && !(i in index) && !(j in index))
                num_bin_2 = num_bin_2+1
                p = p+1
                pattern_bin[p][i] = 1
                pattern_bin[p][j] = 1
                push!(index,i,j)
            end
        end
    end
    println("two in one: ",num_bin_2)

    # if the item is so large that it can not be packed with another two lightest item
    for i in numitem:3
        for j in 1:(i-2)
            # if i and the lightest item j can be packed together but i and the two lightest item j and j+1 can not be packed together
            # and we have not already considered these three items
            if weight[i] + weight[j] < 1 && weight[i] + weight[j] + weight[j+1] > 1 && !(i in index) && !(j in index) && !((j+1) in index)
                num_bin_3 = num_bin_3+1
                p = p+1
                pattern_bin[p][i] = 1
                pattern_bin[p][j] = 1
                push!(index,i,j)
            end
        end
    end
    println("3 too huge but 2 just ok: ", num_bin_3)

    # delete all the index of items already considered
    new_weight = deleteat!(weight,sort(index))
    # the number of bins already packed
    num_bin = num_bin_1 + num_bin_2 + num_bin_3
    # the number of items remaining(not yet considered)
    numitem = numitem - num_bin_1 - 2*(num_bin_2+num_bin_3)
    pattern_bin = pattern_bin[1:p]

    # if we do not succeed to pack even one bin
    if (num_bin == 0)
        println("There is no need to preprocess!!!!!!!!")
    end

    # num_bin: the number of bins generated by this algorithm
    # pattern_bin: the pattern of each bin generated
    # numitem: the number of item remaining to be considered
    # new_weight: the weight of the items remaining to be considered
    # index: the index of the items already considered
    return  num_bin, pattern_bin, numitem, new_weight, index
end
